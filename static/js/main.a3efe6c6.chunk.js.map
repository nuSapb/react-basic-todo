{"version":3,"sources":["TodoInput.js","TodoItem.js","Todolist.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","props","state","newTodo","addClick","bind","onAddTodo","this","setState","value","onChange","e","target","onClick","Component","TodoItem","done","toggle","text","type","Todolist","items","map","todo","i","key","App","todoItems","addTodo","concat","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kNAgCeA,E,kDA5BX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,QAAS,IAEb,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBALD,E,wDAUfC,EADoBC,KAAKN,MAAnBK,WACIC,KAAKL,MAAMC,SACrBI,KAAKC,SAAS,CACVL,QAAS,O,+BAKP,IAAD,OACCA,EAAYI,KAAKL,MAAjBC,QACN,OACI,6BACI,2BAAOM,MAAON,EAASO,SAAU,SAACC,GAAD,OAAO,EAAKH,SAAS,CAAEL,QAASQ,EAAEC,OAAOH,WAC1E,4BAAQI,QAASN,KAAKH,UAAtB,Y,GAxBQU,aC6BTC,E,kDA5BX,WAAYd,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTc,MAAM,GAEV,EAAKC,OAAS,EAAKA,OAAOZ,KAAZ,gBALC,E,qDASfE,KAAKC,SAAS,CACVQ,MAAOT,KAAKL,MAAMc,S,+BAIhB,IACAE,EAASX,KAAKN,MAAdiB,KACN,OACI,6BACI,2BAAOC,KAAK,WACRV,MAAOF,KAAKL,MAAMc,KAClBH,QAASN,KAAKU,SAEjBV,KAAKL,MAAMc,KAAO,SAAWE,EAAOA,O,GAvB9BJ,aCeRM,E,uKAZD,IACAC,EAAUd,KAAKN,MAAfoB,MACN,OACI,6BACI,4BACKA,EAAMC,KAAI,SAACC,EAAMC,GAAP,OAAa,wBAAIC,IAAKD,GAAG,kBAAC,EAAD,CAAUN,KAAMK,c,GAPjDT,aC6BRY,E,kDA1Bb,WAAYzB,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXyB,UAAW,IAEb,EAAKC,QAAU,EAAKA,QAAQvB,KAAb,gBALE,E,oDAQXF,GACNI,KAAKC,SAAS,CACZmB,UAAWpB,KAAKL,MAAMyB,UAAUE,OAAO,CAAC1B,Q,+BAIlC,IACFwB,EAAcpB,KAAKL,MAAnByB,UACN,OACE,6BACE,kBAAC,EAAD,CAAWrB,UAAWC,KAAKqB,UAC3B,kBAAC,EAAD,CAAUP,MAAOM,S,GArBPb,aCQEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a3efe6c6.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass TodoInput extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            newTodo: \"\"\r\n        }\r\n        this.addClick = this.addClick.bind(this)\r\n    }\r\n\r\n    addClick() {\r\n        let { onAddTodo } = this.props\r\n        onAddTodo(this.state.newTodo)\r\n        this.setState({\r\n            newTodo: \"\"\r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n        let { newTodo } = this.state\r\n        return (\r\n            <div>\r\n                <input value={newTodo} onChange={(e) => this.setState({ newTodo: e.target.value })} />\r\n                <button onClick={this.addClick}>Add</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoInput","import React, { Component } from 'react'\r\n\r\nclass TodoItem extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            done: false\r\n        }\r\n        this.toggle = this.toggle.bind(this)\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            done: !this.state.done\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let { text } = this.props\r\n        return (\r\n            <div>\r\n                <input type=\"checkbox\"\r\n                    value={this.state.done}\r\n                    onClick={this.toggle}\r\n                />\r\n                {this.state.done ? \"Done: \" + text : text}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoItem","import React, { Component } from 'react'\r\nimport TodoItem from './TodoItem'\r\n\r\nclass Todolist extends Component {\r\n\r\n    render() {\r\n        let { items } = this.props\r\n        return (\r\n            <div>\r\n                <ul>\r\n                    {items.map((todo, i) => <li key={i}><TodoItem text={todo} /></li>)}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Todolist","import React, { Component } from 'react'\nimport TodoInput from './TodoInput'\nimport Todolist from './Todolist'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      todoItems: []\n    }\n    this.addTodo = this.addTodo.bind(this)\n  }\n\n  addTodo(newTodo) {\n    this.setState({\n      todoItems: this.state.todoItems.concat([newTodo])\n    })\n  }\n\n  render() {\n    let { todoItems } = this.state\n    return (\n      <div>\n        <TodoInput onAddTodo={this.addTodo} />\n        <Todolist items={todoItems} />\n      </div>\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}